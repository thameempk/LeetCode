15. 3Sum
Solved
Medium
Topics
Companies
Hint
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

------------------------------------

Solution :
public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();
        Array.Sort(nums);
        for(int i = 0; i<nums.Length-2; i++)
        {
            if(i > 0 && nums[i] == nums[i - 1]) {
                continue; 
            }
            int l = i+1;
            int r = nums.Length-1;
            int k = -nums[i];
            while(l<r)
            {
                if(nums[l] + nums[r] == k)
                {
                    result.Add(new List<int>{nums[i], nums[l], nums[r]});

                    //as we know we are having sorted array
                    //so skip all the repited value for l from l to max index
                    while(l<r&& nums[l] == nums[l+1])
                    {
                        l++;
                    }

                    //Note:) not required if we will focus only one then autometicaly other part will be handeled
                    // //so skip all the repited value for r from max index to 0th index 
                    // while(l<r&& nums[r] == nums[r-1])
                    // {
                    //     r--;
                    // }
                    //normal flow to check any other pair is there
                    l++;
                    r--;
                }
                else if(nums[l] + nums[r] > k)
                {
                    r--;
                }
                else
                {
                    l++;
                }
            }
        }
        return result;
    }
}
  
